using System;
using System.Linq;
using System.Runtime.InteropServices;

public class List_Cipher_Suites
{

	/// <summary>obtains the cryptographic functions for a context in the specified configuration table</summary>
	[DllImport("bcrypt.dll", CharSet = CharSet.Unicode)]
	static extern uint BCryptEnumContextFunctions(uint dwTable, string pszContext, uint dwInterface, ref uint pcbBuffer, ref IntPtr ppBuffer);

	/// <summary>Free memory that was allocated by one of the CNG functions</summary>
	[DllImport("bcrypt.dll")]
	static extern void BCryptFreeBuffer(IntPtr pvBuffer);

	[StructLayout(LayoutKind.Sequential)]
	public struct CRYPT_CONTEXT_FUNCTIONS
	{
		public uint cFunctions;
		public IntPtr rgpszFunctions;
	}

	public const uint CRYPT_LOCAL = 0x00000001;
	public const uint CRYPT_PRIORITY_BOTTOM = 0xFFFFFFFF;
	public const uint CRYPT_PRIORITY_TOP = 0x00000000;
	public const uint NCRYPT_SCHANNEL_INTERFACE = 0x00010002;

	// Cipher string:
	// TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P384
	// ---------------------------------------      Cipher Suite
	//     -----                                    Key Exchange
	//           -----                              Signature
	//                      -----------             Bulk Encryption
	//                                  ------      Message Authentication
	//                                         ---- Elliptic Curve

	public static void ProcessArguments(string[] args)
	{
		var cbBuffer = 0u;
		var ppBuffer = IntPtr.Zero;
		var status = BCryptEnumContextFunctions(CRYPT_LOCAL, "SSL", NCRYPT_SCHANNEL_INTERFACE, ref cbBuffer, ref ppBuffer);
		if (status != 0)
			return;
		var functions = (CRYPT_CONTEXT_FUNCTIONS)Marshal.PtrToStructure(ppBuffer, typeof(CRYPT_CONTEXT_FUNCTIONS));
		var pStr = functions.rgpszFunctions;
		var ssl30 = Enum.GetNames(typeof(SSL30));
		var tls10 = Enum.GetNames(typeof(TLS10));
		var tls11 = Enum.GetNames(typeof(TLS11));
		var tls12 = Enum.GetNames(typeof(TLS12));
		var tls13 = Enum.GetNames(typeof(TLS13));
		for (int i = 0; i < functions.cFunctions; i++)
		{
			var name = Marshal.PtrToStringUni(Marshal.ReadIntPtr(pStr));
			var s30 = ssl30.Contains(name) ? "SSL30" : "";
			var t10 = tls10.Contains(name) ? "TLS10" : "";
			var t11 = tls11.Contains(name) ? "TLS11" : "";
			var t12 = tls12.Contains(name) ? "TLS12" : "";
			var t13 = tls13.Contains(name) ? "TLS13" : "";
			Console.WriteLine("{0,-5} {1,-5} {2,-5} {3,-5} {4,-5} {5}", s30, t10, t11, t12, t13, name);
			pStr = new IntPtr(pStr.ToInt64() + IntPtr.Size);
		}
		BCryptFreeBuffer(ppBuffer);
	}

	// http://openssl.cs.utah.edu/docs/apps/ciphers.html

	enum SSL20
	{
		SSL_CK_RC4_128_WITH_MD5,
		SSL_CK_RC4_128_EXPORT40_WITH_MD5,
		SSL_CK_RC2_128_CBC_WITH_MD5,
		SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5,
		SSL_CK_IDEA_128_CBC_WITH_MD5,
		SSL_CK_DES_64_CBC_WITH_MD5,
		SSL_CK_DES_192_EDE3_CBC_WITH_MD5,
	}

	enum SSL30
	{
		SSL_RSA_WITH_NULL_MD5,
		SSL_RSA_WITH_NULL_SHA,
		SSL_RSA_EXPORT_WITH_RC4_40_MD5,
		SSL_RSA_WITH_RC4_128_MD5,
		SSL_RSA_WITH_RC4_128_SHA,
		SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5,
		SSL_RSA_WITH_IDEA_CBC_SHA,
		SSL_RSA_EXPORT_WITH_DES40_CBC_SHA,
		SSL_RSA_WITH_DES_CBC_SHA,
		SSL_RSA_WITH_3DES_EDE_CBC_SHA,
		SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA,
		SSL_DH_DSS_WITH_DES_CBC_SHA,
		SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA,
		SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA,
		SSL_DH_RSA_WITH_DES_CBC_SHA,
		SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA,
		SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA,
		SSL_DHE_DSS_WITH_DES_CBC_SHA,
		SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
		SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,
		SSL_DHE_RSA_WITH_DES_CBC_SHA,
		SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
		SSL_DH_anon_EXPORT_WITH_RC4_40_MD5,
		SSL_DH_anon_WITH_RC4_128_MD5,
		SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA,
		SSL_DH_anon_WITH_DES_CBC_SHA,
		SSL_DH_anon_WITH_3DES_EDE_CBC_SHA,
		SSL_FORTEZZA_KEA_WITH_NULL_SHA,
		SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA,
		SSL_FORTEZZA_KEA_WITH_RC4_128_SHA,
	}

	enum TLS10
	{
		TLS_RSA_WITH_NULL_MD5,
		TLS_RSA_WITH_NULL_SHA,
		TLS_RSA_EXPORT_WITH_RC4_40_MD5,
		TLS_RSA_WITH_RC4_128_MD5,
		TLS_RSA_WITH_RC4_128_SHA,
		TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5,
		TLS_RSA_WITH_IDEA_CBC_SHA,
		TLS_RSA_EXPORT_WITH_DES40_CBC_SHA,
		TLS_RSA_WITH_DES_CBC_SHA,
		TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA,
		TLS_DH_DSS_WITH_DES_CBC_SHA,
		TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA,
		TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA,
		TLS_DH_RSA_WITH_DES_CBC_SHA,
		TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA,
		TLS_DHE_DSS_WITH_DES_CBC_SHA,
		TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
		TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,
		TLS_DHE_RSA_WITH_DES_CBC_SHA,
		TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_DH_anon_EXPORT_WITH_RC4_40_MD5,
		TLS_DH_anon_WITH_RC4_128_MD5,
		TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA,
		TLS_DH_anon_WITH_DES_CBC_SHA,
		TLS_DH_anon_WITH_3DES_EDE_CBC_SHA,
		// RFC3268
		TLS_RSA_WITH_AES_128_CBC_SHA,
		TLS_RSA_WITH_AES_256_CBC_SHA,
		TLS_DH_DSS_WITH_AES_128_CBC_SHA,
		TLS_DH_DSS_WITH_AES_256_CBC_SHA,
		TLS_DH_RSA_WITH_AES_128_CBC_SHA,
		TLS_DH_RSA_WITH_AES_256_CBC_SHA,
		TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
		TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
		TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
		TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
		TLS_DH_anon_WITH_AES_128_CBC_SHA,
		TLS_DH_anon_WITH_AES_256_CBC_SHA,
		// RFC4132
		TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA,
		TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA,
		// RFC4162
		TLS_RSA_WITH_SEED_CBC_SHA,
		TLS_DH_DSS_WITH_SEED_CBC_SHA,
		TLS_DH_RSA_WITH_SEED_CBC_SHA,
		TLS_DHE_DSS_WITH_SEED_CBC_SHA,
		TLS_DHE_RSA_WITH_SEED_CBC_SHA,
		TLS_DH_anon_WITH_SEED_CBC_SHA,
		// GOST
		TLS_GOSTR341094_WITH_28147_CNT_IMIT,
		TLS_GOSTR341001_WITH_28147_CNT_IMIT,
		TLS_GOSTR341094_WITH_NULL_GOSTR3411,
		TLS_GOSTR341001_WITH_NULL_GOSTR3411,
		// SSLv3
		TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA,
		TLS_RSA_EXPORT1024_WITH_RC4_56_SHA,
		TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA,
		TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA,
		TLS_DHE_DSS_WITH_RC4_128_SHA,
		// Elliptic
		TLS_ECDH_RSA_WITH_NULL_SHA,
		TLS_ECDH_RSA_WITH_RC4_128_SHA,
		TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
		TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
		TLS_ECDH_ECDSA_WITH_NULL_SHA,
		TLS_ECDH_ECDSA_WITH_RC4_128_SHA,
		TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		TLS_ECDHE_RSA_WITH_NULL_SHA,
		TLS_ECDHE_RSA_WITH_RC4_128_SHA,
		TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		TLS_ECDHE_ECDSA_WITH_NULL_SHA,
		TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
		TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		TLS_ECDH_anon_WITH_NULL_SHA,
		TLS_ECDH_anon_WITH_RC4_128_SHA,
		TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDH_anon_WITH_AES_128_CBC_SHA,
		TLS_ECDH_anon_WITH_AES_256_CBC_SHA,
	}


	/// <summary>
	/// https://www.ietf.org/rfc/rfc4346.txt
	/// </summary>
	enum TLS11
	{
		//RSA
		TLS_RSA_WITH_NULL_MD5 = 0x0001,
		TLS_RSA_WITH_NULL_SHA = 0x0002,
		TLS_RSA_WITH_RC4_128_MD5 = 0x0004,
		TLS_RSA_WITH_RC4_128_SHA = 0x0005,
		TLS_RSA_WITH_IDEA_CBC_SHA = 0x0007,
		TLS_RSA_WITH_DES_CBC_SHA = 0x0009,
		TLS_RSA_WITH_3DES_EDE_CBC_SHA = 0x000A,
		//DH
		TLS_DH_DSS_WITH_DES_CBC_SHA = 0x000C,
		TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 0x000D,
		TLS_DH_RSA_WITH_DES_CBC_SHA = 0x000F,
		TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 0x0010,
		TLS_DHE_DSS_WITH_DES_CBC_SHA = 0x0012,
		TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 0x0013,
		TLS_DHE_RSA_WITH_DES_CBC_SHA = 0x0015,
		TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 0x0016,
		//DH anonymous
		TLS_DH_anon_WITH_RC4_128_MD5 = 0x0018,
		TLS_DH_anon_WITH_DES_CBC_SHA = 0x001A,
		TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 0x001B,
	}

	/// <summary>
	/// https://www.ietf.org/rfc/rfc5246.txt
	/// </summary>
	enum TLS12
	{

		// RSA
		TLS_RSA_WITH_NULL_MD5 = 0x0001,
		TLS_RSA_WITH_NULL_SHA = 0x0002,
		TLS_RSA_WITH_NULL_SHA256 = 0x003B,
		TLS_RSA_WITH_RC4_128_MD5 = 0x0004,
		TLS_RSA_WITH_RC4_128_SHA = 0x0005,
		TLS_RSA_WITH_3DES_EDE_CBC_SHA = 0x000A,
		TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F,
		TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035,
		TLS_RSA_WITH_AES_128_CBC_SHA256 = 0x003C,
		TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x003D,
		// DH
		TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 0x000D,
		TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 0x0010,
		TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 0x0013,
		TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 0x0016,
		TLS_DH_DSS_WITH_AES_128_CBC_SHA = 0x0030,
		TLS_DH_RSA_WITH_AES_128_CBC_SHA = 0x0031,
		TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 0x0032,
		TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033,
		TLS_DH_DSS_WITH_AES_256_CBC_SHA = 0x0036,
		TLS_DH_RSA_WITH_AES_256_CBC_SHA = 0x0037,
		TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 0x0038,
		TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039,
		TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 0x003E,
		TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 0x003F,
		TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 0x0040,
		TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x0067,
		TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 0x0068,
		TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 0x0069,
		TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 0x006A,
		TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x006B,
		// DH anonymous
		TLS_DH_anon_WITH_RC4_128_MD5 = 0x0018,
		TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 0x001B,
		TLS_DH_anon_WITH_AES_128_CBC_SHA = 0x0034,
		TLS_DH_anon_WITH_AES_256_CBC_SHA = 0x003A,
		TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 0x006C,
		TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 0x006D,
		// 
		TLS_RSA_WITH_AES_128_GCM_SHA256 = 0x009C,
		TLS_RSA_WITH_AES_256_GCM_SHA384 = 0x009D,
		TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x009E,
		TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x009F,
		TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 0x00A0,
		TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 0x00A1,
		TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x00A2,
		TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x00A3,
		TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 0x00A4,
		TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 0x00A5,
		TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 0x00A6,
		TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 0x00A7,
		// RFC6367 - HMAC-Based Cipher Suites
		TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xC072,
		TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xC073,
		TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xC074,
		TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xC075,
		TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xC076,
		TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xC077,
		TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xC078,
		TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xC079,
		// RFC6367 - GCM-Based Cipher Suites
		TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC07A,
		TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC07B,
		TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC07C,
		TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC07D,
		TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC07E,
		TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC07F,
		TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 0xC080,
		TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 0xC081,
		TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 0xC082,
		TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 0xC083,
		TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 = 0xC084,
		TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 = 0xC085,
		TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC086,
		TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC087,
		TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC088,
		TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC089,
		TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC08A,
		TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC08B,
		TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xC08C,
		TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xC08D,
		// RFC6367 - PSK-Based Cipher Suites
		TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xC08D,
		TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xC08F,
		TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xC090,
		TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xC091,
		TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xC092,
		TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xC093,
		TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xC094,
		TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xC095,
		TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xC096,
		TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xC097,
		TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xC098,
		TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xC099,
		TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xC09A,
		TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xC09B,
		// RFC5289 - HMAC-Based Cipher Suites
		TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC023,
		TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC024,
		TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC025,
		TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC026,
		TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xC027,
		TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xC028,
		TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 0xC029,
		TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 0xC02A,
		// RFC5289 - Galois Counter Mode-Based Cipher Suites
		TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02B,
		TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xC02C,
		TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02D,
		TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 0xC02E,
		TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xC02F,
		TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xC030,
		TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 0xC031,
		TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 0xC032,
	}

	/// <summary>
	/// https://www.ietf.org/rfc/rfc8446.txt
	/// </summary>
	enum TLS13
	{
		TLS_AES_128_GCM_SHA256 = 0x1301,
		TLS_AES_256_GCM_SHA384 = 0x1302,
		TLS_CHACHA20_POLY1305_SHA256 = 0x1303,
		TLS_AES_128_CCM_SHA256 = 0x1304,
		TLS_AES_128_CCM_8_SHA256 = 0x1305,
	}

}

